---
title: "Learning to Program in Base R"
author: Laraib Azmat
date: May 22, 2024
format: html
editor: visual
editor_options: 
  chunk_output_type: inline
---

### Task 1: Basic Vector Practice

-   Creating names for Patients

```{r patient render}
patient <- paste("Subject", 1:20, sep = "_")
```

-   Creating a new object using pre-treatment values

```{r pretreatment raw}
t <- c(130, 128, 116, 124, 133, 134, 118, 126, 114, 127, 141, 138, 128, 140, 137, 131, 120, 128, 139, 135)
t
```

-   Adding patient names to pre-treatment values

```{r pretreatment object with patient}
names(t)[1:20] <- patient
pre_bp <- t  #created a new object with the added patient names
pre_bp
```

-   Creating a new object with post-treatment value

```{r posttreatment raw}
p <- c(114, 98, 113, 99, 107, 116, 113, 111, 119, 117, 101, 119, 130, 122, 106, 106, 124, 102, 117, 113)
p
```

-   Adding patient names to post-treatment values

```{r posttreatment object with patient}
names(p)[1:20] <- patient
post_bp <- p  #created a new object with the added patient names
post_bp
```

-   Calculating change in blood pressure and defining it as a new item

```{r difference}
diff_bp <- post_bp-pre_bp  #created a new object with the difference in blood pressure
diff_bp
```

-   Calculating decrease in blood pressure for all patients

```{r difference average}
mean(diff_bp)
```

-   Indicating which patient had an increase in blood pressure

```{r increased bp}
which(diff_bp > 0, arr.ind = TRUE)
```

-   Isolating patient data with increased blood pressure

```{r increased bp only}
pos_diff <- diff_bp[diff_bp > 0] #created a new object with only the data of the patients that had an increase in blood pressure
pos_diff
```

-   Calculating average increase in blood pressure

```{r increased bp average}
mean(pos_diff)
```

### Task 2: Basic Data Frame Practice

```{r making data frame}
bp_df <- data.frame("Patient" = patient, "Pretreatment" = pre_bp, "Posttreatement" = post_bp, "Difference" = diff_bp)
rownames(bp_df) <- NULL  #Hiding row names due to repetition
bp_df
```

-   Showing rows with only negative difference

```{r creating subset}
bp_sub <- subset(bp_df, diff_bp < 0)
bp_sub
```

-   New column with True statements

```{r creating a new column}
bp_df$BPLower <- ifelse(bp_df$Posttreatement < 120, TRUE, " ")  #adding a new column with a condition on Posttreatment
bp_df
```

-   Print a final table

```{r final print}
#| echo: false
knitr::kable(bp_df)
```

### Task 3: List Practice

-   Creating a new object using placebo pre-treatment values

```{r placebo pretreatment}
b <- c( 138, 135, 147, 117, 152, 134, 114, 121, 131, 130)
b
```

-   Creating a new object using placebo post-treatment values

```{r placebo posttreatment}
a <- c( 105, 136, 123, 130, 134, 143, 135, 139, 120, 124)
a
```

-   Creating names for patients treated with placebo

```{r placebo patients}
p_patient <- paste("Subject", 1:10, sep = "_")
p_patient
```

-   Repeating steps from Task 2 to create a new data frame

```{r placebo data frame}
#apply patient names
names(b)[1:10] <- p_patient
names(a)[1:10] <- p_patient
#rename the objects
p_pre <- b
p_post <- a
#create a new object with the difference
p_diff <- (p_post-p_pre)
#create a data freame with the newly created objects and change names 
p_df <- data.frame("Patient" = p_patient, "PrePlacebo" = p_pre, "PostPlacebo" = p_post, "Difference" = p_diff)
#hiding row names due to repetition
rownames(p_df) <- NULL
#create an object with a subset
p_sub <- subset(p_df, p_diff < 0)
p_sub
#adding a new column with a condition on PostPlacebo
p_df$PLower <- ifelse(p_df$PostPlacebo < 120, TRUE, " ")
p_df
```

-   Creating a list with the treatment data frame

```{r treatments list}
bloodpressure <- list(treatment = bp_df, placebo = p_df)
bloodpressure
```

-   Practicing accessing a list

```{r access practice}
#Structure of the overall list 
str(bloodpressure)
#Return with only the Posttreatment column of the treatment element of the list
bloodpressure$treatment[3]
#Return with the second and third column of the first element of the list
bloodpressure[[1]][2:3]
```

-   Accessing a specific part of a list

```{r access placebo, pre-treatment}
bloodpressure[[2]][2]
```

### Task 4: Control flow Practice

-   Creating new columns

```{r create new columns}
bp_df$Status <- character(20)
p_df$P.status <- character(10)
```

  -   Creating a loop over bloodpressure list, treatment data frame and Posttreatment column   
  
```{r for loop over treatment}
for (i in seq_along(bloodpressure$treatment$Posttreatement)) { #This took me three days and a computer engineer brother to figure out...
  if(bloodpressure$treatment$Posttreatement[i] <= 120) {
    bloodpressure$treatment$Status[i] <- "Optimal"
  } else if (bloodpressure$treatment$Posttreatement[i] > 120 & bloodpressure$treatment$Posttreatement[i] <=130){
  bloodpressure$treatment$Status[i] <- "Borderline"
  } else if (bloodpressure$treatment$Posttreatement[i] >130){
    bloodpressure$treatment$Status[i] <- "High"
  }
}
bloodpressure$treatment
```

  -   Repeating the loop over bloodpressure list, placebo data frame and PostPlacebo column 
  
```{r repeat for placebo}
for (i in 1:length(bloodpressure$placebo$PostPlacebo)) {
  if(bloodpressure$placebo$PostPlacebo[i] <= 120) {
    bloodpressure$placebo$P.Status[i] <- "Optimal"
  } else if (bloodpressure$placebo$PostPlacebo[i] > 120 & bloodpressure$placebo$PostPlacebo[i] <=130){
  bloodpressure$placebo$P.Status[i] <- "Borderline"
  } else if (bloodpressure$placebo$PostPlacebo[i] >130){
    bloodpressure$placebo$P.Status[i] <- "High"
  }
}
bloodpressure$placebo
```

### Task 5: Function Writing

```{r}
bp_fun <- function(bloodpressure, stat = "mean") {
#create an empty list to store results
  mean_results <- list()
#repeat over each data frame in the list
  for (i in 1:length(bloodpressure)) {
  bp_data <- bloodpressure[[i]]
#keep only numeric columns
  num_col <- sapply(bp_data, is.numeric)
  num_data <- bp_data[, num_col]
#create a vector with the default value, failed multiple times because of this
  default_value <- NA
#compute the summary for numeric columns
  mean_result <- setNames(rep(default_value, ncol(num_data)), names(num_data))
  mean_result[] <- colMeans(num_data, na.rm = TRUE)
#put the result in the empty list
  mean_results[[i]] <- mean_result
  }
  return(mean_results)
}
```

  -   Testing the function
```{r function test}

#I didn't really understand this part
bp_fun(bloodpressure)

bp_fun(bloodpressure, "var")

bp_fun(bloodpressure, "sd")

bp_fun(bloodpressure, "min")

bp_fun(bloodpressure, "max")

```

